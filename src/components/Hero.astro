---
import {GitHubLink, steps} from "../consts";
---

<section class="hero">
    <div>
        <h1>
            Ein Forschungsprozess ohne Unterbrechungen
        </h1>
        <p class="dark:text-gray-100">
            In den Digital Humanities fehlen bislang integrierte Lösungen für einen geschlossenen Forschungsdatenzyklus.
            HisQu entwickelt eine fachspezifische Anwendung, um diesen Mangel zu beheben und den gesamten
            Forschungsprozess für historische Quellen digital zu unterstützen.
        </p>
        <div class="cta">
            <a href="#toolchain" class="btn primary">Die Toolchain</a>
            <a target="_blank" href={GitHubLink} class="btn">Unser GitHub</a>
        </div>
    </div>

    <!-- Diagram -->
    <div class="diagram" aria-label="Der allgemeine iterative Forschungsprozess">
        <div class="ring" aria-hidden="true"></div>
        <div class="center">
            Iterativer Prozess

            <!-- circular arrow overlay -->
            <svg class="reload" viewBox="0 0 100 100" aria-hidden="true">
                <defs>
                    <!-- arrowhead -->
                    <marker id="arrowhead" viewBox="0 0 10 10" refX="8" refY="5" markerWidth="6" markerHeight="6"
                            orient="auto">
                        <path d="M0,0 L10,5 L0,10 Z" fill="#515151"></path>
                    </marker>
                </defs>

                <!-- arc (almost a full circle, with a gap like a reload icon) -->
                <!-- radius 45, center 50/50, starts at top (50,5) and goes CCW nearly full circle -->
                <path
                        class="arc"
                        d="M50,5
         A45,45 0 1 1 49.99,5"
                        fill="none"
                        stroke="#515151"
                        stroke-width="2"
                        stroke-linecap="round"
                        marker-end="url(#arrowhead)"
                />
            </svg>
        </div>
        {
            steps.map((s) => (
                    <div class="node" style={`--angle:${s.angle}deg`} data-key={s.key}>
                        <button class="step bg-white dark:bg-gray-800" aria-haspopup="true" aria-expanded="false">
                            <span class="title">{s.title}</span>
                            <span class="desc">{s.subtitle}</span>
                        </button>
                    </div>
            ))
        }
    </div>

    <script is:inline>
        // Find the surrounding <section class="hero">
        const container = document.currentScript && document.currentScript.closest('section.hero');

        if (container) {
            const closeAll = () => {
                container.querySelectorAll('.node.open').forEach(n => n.classList.remove('open'));
                container.querySelectorAll('.step[aria-expanded="true"]').forEach(btn => {
                    btn.setAttribute('aria-expanded', 'false');
                });
            };

            // Click/tap inside the diagram: open the clicked node, close others
            container.addEventListener('click', (e) => {
                const target = e.target;
                const node = target && (target.closest ? target.closest('.node') : null);
                const nodes = container.querySelectorAll('.node');

                // Close all first
                nodes.forEach(n => n.classList.remove('open'));
                container.querySelectorAll('.step').forEach(btn => btn.setAttribute('aria-expanded', 'false'));

                if (node) {
                    node.classList.add('open');
                    const btn = node.querySelector('.step');
                    if (btn) btn.setAttribute('aria-expanded', 'true');
                    e.stopPropagation(); // prevent document click handler from closing immediately
                }
            });

            // Keyboard: open with Enter/Space when focused on a .step, close with Escape
            container.addEventListener('keydown', (e) => {
                const key = e.key;
                const stepBtn = e.target && e.target.closest ? e.target.closest('.step') : null;

                if ((key === 'Enter' || key === ' ') && stepBtn) {
                    const node = stepBtn.closest('.node');
                    if (node) {
                        // toggle this one; close others
                        const isOpen = node.classList.contains('open');
                        closeAll();
                        if (!isOpen) {
                            node.classList.add('open');
                            stepBtn.setAttribute('aria-expanded', 'true');
                        }
                        e.preventDefault();
                        e.stopPropagation();
                    }
                } else if (key === 'Escape') {
                    closeAll();
                }
            });

            // Click anywhere else on the page: close all
            document.addEventListener('click', closeAll);
        }
    </script>
</section>
