---
// src/components/Hero.astro
// Update the steps/tools below.  status: 'ready' | 'wip'

import {GitHubLink} from "../consts";
type Tool = { name: string; href?: string; status?: 'ready' | 'wip'; note?: string };
type Step = { key: string; label: string; description: string; angle: number; tools: Tool[] };

const steps: Step[] = [
    {
        key: 'creation',
        label: '1. Erstellung',
        description: 'Digitalisierung historischer Ressourcen',
        angle: -90,
        tools: [{name: 'Romana Repertoria Online', status: 'ready', href: "http://www.romana-repertoria.net/993.html"}],
    },
    {
        key: 'modelling',
        label: '2. Modellierung',
        description: 'A key aspect of the development: The Ontology',
        angle: -25,
        tools: [{name: 'Ontology Pipeline Assistant', href: '/tools/opa', status: 'ready'}],
    },
    {
        key: 'processing',
        label: '3. Verarbeitung',
        description: 'Data extraction · LLM API connection',
        angle: 25,
        tools: [
            {name: 'Paredros', href: '/tools/paredros', status: 'ready'},
        ],
    },
    {
        key: 'analysis',
        label: '4. Analyse',
        description: 'AI-supported SPARQL endpoint',
        angle: 90,
        tools: [{name: 'Query by Graph', href: '/tools/quebyg', status: 'ready'}],
    },
    {
        key: 'archiving',
        label: '5. Archivierung',
        description: 'Linked Open Data via Wikibase / FactGrid',
        angle: 155,
        tools: [
            {name: 'FactGrid', href: 'https://database.factgrid.de/', status: 'ready'},
        ],
    },
    {
        key: 'reuse',
        label: '6. Nachnutzung',
        description: 'Documentation framework for research processes',
        angle: 205,
        tools: [{name: 'Doku framework', status: 'wip'}],
    },
];
---

<section class="hero">
    <div>
        <h1>
            Ein Forschungsprozess ohne Unterbrechungen
        </h1>
        <p class="dark:text-gray-100">
            Die Problemlösung von Clemens
        </p>
        <div class="cta">
            <a href="/tools" class="btn primary">The Toolchain</a>
            <a target="_blank" href={GitHubLink} class="btn">Our GitHub</a>
        </div>
    </div>

    <!-- Diagram -->
    <div class="diagram" aria-label="Der allgemeine iterative Forschungsprozess">
        <div class="ring" aria-hidden="true"></div>
        <div class="center">
            Iterativer Prozess

            <!-- circular arrow overlay -->
            <svg class="reload" viewBox="0 0 100 100" aria-hidden="true">
                <defs>
                    <!-- arrowhead -->
                    <marker id="arrowhead" viewBox="0 0 10 10" refX="8" refY="5" markerWidth="6" markerHeight="6" orient="auto">
                        <path d="M0,0 L10,5 L0,10 Z" fill="#515151"></path>
                    </marker>
                </defs>

                <!-- arc (almost a full circle, with a gap like a reload icon) -->
                <!-- radius 45, center 50/50, starts at top (50,5) and goes CCW nearly full circle -->
                <path
                        class="arc"
                        d="M50,5
         A45,45 0 1 1 49.99,5"
                        fill="none"
                        stroke="#515151"
                        stroke-width="2"
                        stroke-linecap="round"
                        marker-end="url(#arrowhead)"
                />
            </svg>
        </div>
        {
            steps.map((s) => (
                    <div class="node" style={`--angle:${s.angle}deg`} data-key={s.key}>
                        <button class="step bg-white dark:bg-gray-800" aria-haspopup="true" aria-expanded="false">
                            <span class="title">{s.label}</span>
                            <span class="desc">{s.description}</span>
                        </button>
                        <div class="popover" role="menu">
                            <h3>{s.label} — Tools</h3>
                            <ul>
                                {s.tools.map((t) => (
                                        <li class={t.status === 'wip' ? 'wip' : 'ready'}>
                                            {t.href && t.status === 'ready'
                                                ? <a href={t.href}>{t.name}</a>
                                                : <span>{t.name}</span>}
                                            {t.status === 'wip' && <em>WIP{t.note ? ` — ${t.note}` : ''}</em>}
                                        </li>
                                ))}
                            </ul>
                        </div>
                    </div>
            ))
        }
    </div>

    <script is:inline>
        // Find the surrounding <section class="hero">
        const container = document.currentScript && document.currentScript.closest('section.hero');

        if (container) {
            const closeAll = () => {
                container.querySelectorAll('.node.open').forEach(n => n.classList.remove('open'));
                container.querySelectorAll('.step[aria-expanded="true"]').forEach(btn => {
                    btn.setAttribute('aria-expanded', 'false');
                });
            };

            // Click/tap inside the diagram: open the clicked node, close others
            container.addEventListener('click', (e) => {
                const target = e.target;
                const node = target && (target.closest ? target.closest('.node') : null);
                const nodes = container.querySelectorAll('.node');

                // Close all first
                nodes.forEach(n => n.classList.remove('open'));
                container.querySelectorAll('.step').forEach(btn => btn.setAttribute('aria-expanded', 'false'));

                if (node) {
                    node.classList.add('open');
                    const btn = node.querySelector('.step');
                    if (btn) btn.setAttribute('aria-expanded', 'true');
                    e.stopPropagation(); // prevent document click handler from closing immediately
                }
            });

            // Keyboard: open with Enter/Space when focused on a .step, close with Escape
            container.addEventListener('keydown', (e) => {
                const key = e.key;
                const stepBtn = e.target && e.target.closest ? e.target.closest('.step') : null;

                if ((key === 'Enter' || key === ' ') && stepBtn) {
                    const node = stepBtn.closest('.node');
                    if (node) {
                        // toggle this one; close others
                        const isOpen = node.classList.contains('open');
                        closeAll();
                        if (!isOpen) {
                            node.classList.add('open');
                            stepBtn.setAttribute('aria-expanded', 'true');
                        }
                        e.preventDefault();
                        e.stopPropagation();
                    }
                } else if (key === 'Escape') {
                    closeAll();
                }
            });

            // Click anywhere else on the page: close all
            document.addEventListener('click', closeAll);
        }
    </script>
</section>
