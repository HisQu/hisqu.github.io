---
import TeamMember from './TeamMember.astro';
import { getCollection } from 'astro:content';

// Fetch team collection entries
const entries = await getCollection('team');

// Normalize data (pull out the frontmatter data object)
type TeamData = typeof entries[number]['data'];
const teamMembers: TeamData[] = entries
  .map(e => e.data)
  .sort((a, b) => {
    const ap = a.numerical_position ?? 9999;
    const bp = b.numerical_position ?? 9999;
    if (ap !== bp) return ap - bp;
    return (a.name || '').localeCompare(b.name || '');
  });

function groupBy<T extends Record<string, any>>(arr: T[], key: keyof T) {
  return arr.reduce((acc: Record<string, T[]>, item) => {
    const group = String(item[key] ?? 'Sonstiges');
    if (!acc[group]) acc[group] = [];
    acc[group].push(item);
    return acc;
  }, {} as Record<string, T[]>);
}

const grouped = groupBy(teamMembers, 'group');
---


<section class="team-section">
  <h2>Our Team</h2>
  {(Object.entries(grouped) as [string, TeamData[]][]).map(([group, members]) => {
    return (
      <>
        <div class="team-group">
          <h3>{group}</h3>
          <div class="team-list">
            {members.map((member) => (
              <TeamMember member={member} />
            ))}
          </div>
        </div>
      </>
    );
  })}
</section>



<style>
.team-section {
  margin: 3rem 0;
}
.team-group {
  margin-bottom: 2.5rem;
}
.team-list {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
}
.team-member {
  background: #f8f8f8;
  border-radius: 8px;
  padding: 1.5rem;
  min-width: 250px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.04);
}
.team-member h4 {
  margin-top: 0;
}
</style>
