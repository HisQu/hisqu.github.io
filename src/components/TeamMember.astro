---
const { member } = Astro.props;
import { Image } from 'astro:assets';

// Extract fields with fallbacks (new schema: name + academic_title {prefix,suffix})
const baseName = member.name ?? member.title ?? '';
const prefix = member.academic_title?.prefix ? member.academic_title.prefix.trim() : '';
const suffix = member.academic_title?.suffix ? member.academic_title.suffix.trim() : '';
const name = [prefix, baseName].filter(Boolean).join(prefix ? ' ' : '') + (suffix ? `, ${suffix}` : '');
const role = member.position ?? '';
const rawImage = member.image ?? null;

const xUrl = member.xUrl ?? member.twitter ?? member.x ?? null;
const linkedinUrl = member.linkedinUrl ?? member.linkedin ?? null;

// Generate initials if no image
const initials = name
  ? name
      .split(',')[0]
      .split(' ')
      .map((part:string) => part[0])
      .join('')
      .toUpperCase()
  : '?';
---

{(() => {
  // If the image is an imported image metadata object (from image() schema or import), use <Image>
  // (Removed imported image object handling as schema now stores plain string)
  // If it's a string URL (remote or absolute path), use a normal img tag
  if (rawImage && typeof rawImage === 'object' && 'src' in rawImage) {
    return (
      <Image
        src={rawImage}
        alt={name}
        class="aspect-3/2 w-full rounded-2xl object-cover"
        loading="lazy"
      />
    );
  }
  // Otherwise show placeholder initials
  return (
    <div class="aspect-3/2 w-full flex items-center justify-center rounded-2xl bg-gray-200 text-gray-600 dark:bg-gray-700 dark:text-gray-300 text-3xl font-bold">
      {initials}
    </div>
  );
})()}

<h3 class="mt-6 text-lg/8 font-semibold tracking-tight text-gray-900 dark:text-white">
  {name}
</h3>

{role && (
  <p class="text-base/7 text-gray-600 dark:text-gray-400">
    {role}
  </p>
)}

<ul role="list" class="mt-6 flex gap-x-6">
  {xUrl && (
    <li>
      <a
        href={xUrl}
        class="text-gray-400 hover:text-gray-500 dark:text-gray-400 dark:hover:text-gray-200"
        rel="me noopener"
      >
        <span class="sr-only">X</span>
        <svg class="size-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
          <path d="M11.4678 8.77491L17.2961 2H15.915L10.8543 7.88256L6.81232 2H2.15039L8.26263 10.8955L2.15039 18H3.53159L8.87581 11.7878L13.1444 18H17.8063L11.4675 8.77491H11.4678ZM9.57608 10.9738L8.95678 10.0881L4.02925 3.03974H6.15068L10.1273 8.72795L10.7466 9.61374L15.9156 17.0075H13.7942L9.57608 10.9742V10.9738Z" />
        </svg>
      </a>
    </li>
  )}
  {linkedinUrl && (
    <li>
      <a
        href={linkedinUrl}
        class="text-gray-400 hover:text-gray-500 dark:text-gray-400 dark:hover:text-gray-200"
        rel="me noopener"
      >
        <span class="sr-only">LinkedIn</span>
        <svg class="size-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
          <path
            fill-rule="evenodd"
            d="M16.338 16.338H13.67V12.16c0-.995-.017-2.277-1.387-2.277-1.39 0-1.601 1.086-1.601 2.207v4.248H8.014v-8.59h2.559v1.174h.037c.356-.675 1.227-1.387 2.526-1.387 2.703 0 3.203 1.778 3.203 4.092v4.711zM5.005 6.575a1.548 1.548 0 11-.003-3.096 1.548 1.548 0 01.003 3.096zm-1.337 9.763H6.34v-8.59H3.667v8.59zM17.668 1H2.328C1.595 1 1 1.581 1 2.298v15.403C1 18.418 1.595 19 2.328 19h15.34c.734 0 1.332-.582 1.332-1.299V2.298C19 1.581 18.402 1 17.668 1z"
            clip-rule="evenodd"
          />
        </svg>
      </a>
    </li>
  )}
</ul>
